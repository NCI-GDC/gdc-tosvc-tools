"""
Filter VCF output file generated by PureCN 1.11.7
"""

import gzip
import os
from typing import List

import click

from gdc_tosvc_tools.utils import get_info


@click.command()
@click.option(
    "-i", "--input_vcf", type=str, required=True, help="purecn input vcf file"
)
@click.option(
    "-o", "--output_vcf", type=str, required=True, help="filtered output vcf file"
)
@click.option(
    "-p",
    "--threshold",
    type=float,
    default=0.2,
    required=True,
    help="variants are filtered if their PureCN somatic posterior probability less than thredhold",
)
def main(
    input_vcf: str,
    output_vcf: str,
    threshold: float,
) -> None:
    if os.path.basename(input_vcf).endswith(".gz"):
        open_fn = gzip.open
    else:
        open_fn = open  # type: ignore
    header: List[str] = []
    filter_add = False
    line: str
    with open_fn(input_vcf) as input_fh, open(output_vcf, "w") as output_fh:
        for line in input_fh:  # type: ignore
            if line.startswith("#"):
                if filter_add is False:
                    output_fh.writelines(
                        [
                            '##FILTER=<ID=PASS,Description="Pass all GDC filtering">',
                            '##FILTER=<ID=purecn_not_process,Description="Variant not processed by PureCN">',
                            '##FILTER=<ID=gdc_purecn_germline,Description="GDC germline filter based on PureCN metrics">',
                            '##FILTER=<ID=mmq15,Description="median mapping quality less than 15">',
                            '##FILTER=<ID=af0.08,Description="alternative allele frequency less than 0.08">',
                        ]
                    )
                    filter_add = True
                output_fh.write(line)
                continue

            val = line.strip().split("\t")
            info, sinfo = get_info(val[7:])
            filter_set = []
            if val[6] != "." and val[6] != "PASS":
                filter_set = val[6].split(";")
            try:
                if float(sinfo["MMQ"]) < 15:
                    filter_set.append("mmq15")
            except Exception:
                pass
            try:
                if float(sinfo["AF"]) < 0.08:
                    filter_set.append("af0.08")
            except Exception:
                pass

            if "PureCN.PS" not in info:
                filter_set.append("purecn_not_process")

            try:
                # Filtering
                TYPE = info["TYPE"]
                AF = float(info["AF"])
                SSF = float(info["SSF"])
                MSI = float(info["MSI"])
                MSILEN = float(info["MSILEN"])
                SBF = float(info["SBF"])
                QL = float(info["QUAL"])
                DP = int(info["DP"])
                MQ = float(info["MQ"])
                NM = float(info["NM"])
                VD = float(info["VD"])
                VD_s2 = float(info["VD_s2"])
                SHIFT3 = float(info["SHIFT3"])
                ODDRATIO = float(info["ODDRATIO"])

                # first bcbio filtering
                bcbio_filter1 = (AF * DP < 6) and (
                    (MQ < 55.0 and NM > 1.0)
                    or (MQ < 60.0 and NM > 2.0)
                    or (DP < 10)
                    or (QL < 45)
                )
                # second bcbio filtering
                bcbio_filter2 = (AF < 0.2) and (QL < 55) and (SBF > 0.06)

                gdc_filter1 = (
                    float(info["PureCN.PS"]) < 0.2
                    or float(info["PureCN.LR"]) > 2
                    or float(info["PureCN.LR"]) < -2
                    or float(info["PureCN.GM0"]) > 0.1
                    or float(info["PureCN.GM1"]) > 0.1
                    or float(info["PureCN.GM2"]) > 0.1
                    or float(info["PureCN.GM3"]) > 0.1
                    or float(info["PureCN.GM4"]) > 0.1
                    or float(info["PureCN.GM5"]) > 0.1
                    or float(info["PureCN.GM6"]) > 0.1
                    or float(info["PureCN.GM7"]) > 0.1
                )

                gdc_filter2 = (
                    gdc_filter1
                    or AF < 0.1
                    or MQ < 20
                    or MSI > 5
                    or SHIFT3 > 10
                    or NM > 2
                    or ODDRATIO > 20
                )

                if bcbio_filter1 and bcbio_filter2 and gdc_filter2:
                    filter_set.append("gdc_purecn_germline")
            except Exception:
                pass

            if len(filter_set) == 0:
                output_fh.write("\t".join(val[0:6] + ["PASS"] + val[7:]))
                output_fh.write("\n")
            else:
                output_fh.write("\t".join(val[0:6] + [";".join(filter_set)] + val[7:]))
                output_fh.write("\n")


if __name__ == "__main__":
    main()

# __END__
