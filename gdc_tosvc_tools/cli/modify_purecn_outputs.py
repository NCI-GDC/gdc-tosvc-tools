"""
Modify two output files <sample>.csv and <sample>_dnacopy.seg generated by PureCN 1.11.7
following GDC-specs for metadata and content
"""

import click

from gdc_tosvc_tools.__main__ import CLI


@click.command(cls=CLI)
@click.option("--sample_id", required=True, help="sample_id")
@click.option("--info_file", required=True, help="purecn info file")
@click.option("--seg_file", required=True, help="purecn dnacopy seg file")
@click.option("--modified_info_file", required=True, help="modified purecn info file")
@click.option(
    "--modified_seg_file", required=True, help="modified purecn dnacopy seg file"
)
def main(
    sample_id: str,
    info_file: str,
    seg_file: str,
    modified_info_file: str,
    modified_seg_file: str,
) -> None:

    with open(info_file) as info_fh, open(modified_info_file, "w") as modified_info_fh:
        tmp = info_fh.readline().strip().split(",")
        tmp1 = []
        for t in tmp:
            tmp1.append(t.strip('"'))
        modified_info_fh.write("GDC_Aliquot\t" + "\t".join(tmp1[1:]))
        modified_info_fh.write("\n")
        tmp = info_fh.readline().strip().split(",")
        tmp1 = []
        for t in tmp:
            tmp1.append(t.strip('"'))
        modified_info_fh.write("\t".join([sample_id] + tmp1[1:]) + "\n")

    with open(seg_file) as seg_fh, open(modified_seg_file, "w") as modified_seg_fh:
        seg_fh.readline()
        modified_seg_fh.write(
            "\t".join(
                [
                    "GDC_Aliquot",
                    "Chromosome",
                    "Start",
                    "End",
                    "Num_Probes",
                    "Segment_Mean",
                ]
            )
        )
        modified_seg_fh.write("\n")
        for line in seg_fh:
            tmp = line.strip().split("\t")
            idx = len(tmp) - 1
            modified_seg_fh.write("\t".join([sample_id] + tmp[1:idx]))
            modified_seg_fh.write("\n")


if __name__ == "__main__":
    main()

# __END__
