"""
Filter VCF output file generated by Mutect2
"""

import gzip
import os

import click

from gdc_tosvc_tools.__main__ import CLI
from gdc_tosvc_tools.utils import get_info


@click.command(cls=CLI)
@click.option(
    "-i", "--input_vcf", type=str, required=True, help="purecn input vcf file"
)
@click.option(
    "-o", "--output_vcf", type=str, required=True, help="filtered output vcf file"
)
def main(
    input_vcf: str,
    output_vcf: str,
) -> None:

    if os.path.basename(input_vcf).endswith(".gz"):
        open_fn = gzip.open
    else:
        open_fn = open  # type: ignore

    line: str
    with open_fn(input_vcf) as input_fh, open(output_vcf, "w") as output_fh:  # type: ignore
        filter_add = False
        for line in input_fh:  # type: ignore
            if line.startswith("#"):
                if filter_add is False:
                    output_fh.writelines(
                        [
                            '##FILTER=<ID=PASS,Description="Pass all GDC filtering">',
                            '##FILTER=<ID=mmq15,Description="median mapping quality less than 15">',
                            '##FILTER=<ID=af0.08,Description="alternative allele frequency less than 0.08">',
                            "##gdc_filtering_status=These calls have not been filtered by PureCN because PureCN NormalDB is not available for this capture kit.",
                        ]
                    )
                    filter_add = True
                output_fh.write(line)
                continue

            val = line.strip().split("\t")
            _, sinfo = get_info(val[7:])
            filter_set = []
            if val[6] != "." and val[6] != "PASS":
                filter_set = val[6].split(";")
            try:
                if float(sinfo["MMQ"]) < 15:
                    filter_set.append("mmq15")
            except Exception:
                pass
            try:
                if float(sinfo["AF"]) < 0.08:
                    filter_set.append("af0.08")
            except Exception:
                pass
            if len(filter_set) == 0:
                output_fh.write("\t".join(val[0:6] + ["PASS"] + val[7:]))
                output_fh.write("\n")
            else:
                output_fh.write("\t".join(val[0:6] + [";".join(filter_set)] + val[7:]))
                output_fh.write("\n")


if __name__ == "__main__":
    main()

# __END__
