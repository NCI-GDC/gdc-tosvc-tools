"""
Filter VCF output file generated by PureCN 1.11.7
"""

import sys
import argparse
import os
import gzip

def get_info(val):
    info, sinfo = {}, {}
    for v in val[0].split(";"):
        tmp1 = v.split("=")
        if len(tmp1) == 2:
            info[tmp1[0]] = tmp1[1]
    tmp2 = val[1].split(":")
    tmp3 = val[2].split(":")
    for i in range(len(tmp2)):
        sinfo[tmp2[i]] = tmp3[i]
    return info, sinfo

parser = argparse.ArgumentParser(description='Modify purecn input files.')
parser.add_argument('-i', '--input_vcf', type=str, required=True, help='purecn input vcf file')
parser.add_argument('-o', '--output_vcf', type=str, required=True, help='filtered output vcf file')
parser.add_argument('-p', '--prob_thres', type=float, default=0.2, required=True, help='variants are filtered if their PureCN somatic posterior probability less than thredhold)')
args = vars(parser.parse_args())
input_fn = args['input_vcf']
output_fn = args['output_vcf']
prob_thres = args['prob_thres']

if os.path.basename(input_fn).endswith('.gz'):
    f1 = gzip.open(input_fn, 'r')
else:
    f1 = open(input_fn)
f2 = open(output_fn, "w")
header = []
filter_add = False
for line in f1:
    if line[0] == "#":
        if filter_add == False:
            f2.write("##FILTER=<ID=PASS,Description=\"Pass all GDC filtering\">\n")
            f2.write("##FILTER=<ID=purecn_not_process,Description=\"Variant not processed by PureCN\">\n")
            f2.write("##FILTER=<ID=gdc_purecn_germline,Description=\"GDC germline filter based on PureCN metrics\">\n")
            f2.write("##FILTER=<ID=mmq15,Description=\"median mapping quality less than 15\">\n")
            f2.write("##FILTER=<ID=af0.08,Description=\"alternative allele frequency less than 0.08\">\n")
            filter_add = True
        f2.write(line)
        continue

    val = line.strip().split("\t")
    info, sinfo = get_info(val[7:])
    filter_set = []
    if val[6] != "." and val[6] != "PASS":
        filter_set = val[6].split(";")
    try:
        if float(sinfo["MMQ"]) < 15:
            filter_set.append("mmq15")
    except:
        pass
    try:
        if float(sinfo["AF"]) < 0.08:
            filter_set.append("af0.08")
    except:
        pass

    if "PureCN.PS" not in info:
        filter_set.append("purecn_not_process")

    try:
        #Filtering
        TYPE = info["TYPE"]
        AF = float(info["AF"])
        SSF = float(info["SSF"])
        MSI = float(info["MSI"])
        MSILEN = float(info["MSILEN"])
        SBF = float(info["SBF"])
        QL = float(info["QUAL"])
        DP = int(info["DP"])
        MQ = float(info["MQ"])
        NM = float(info["NM"])
        VD = float(info["VD"])
        VD_s2 = float(info["VD_s2"])
        SHIFT3 = float(info["SHIFT3"])
        ODDRATIO = float(info["ODDRATIO"])

        #first bcbio filtering
        bcbio_filter1 = (AF * DP < 6) and ((MQ < 55.0 and NM > 1.0) or (MQ < 60.0 and NM > 2.0) or (DP < 10) or (QL < 45))
        #second bcbio filtering
        bcbio_filter2 = (AF < 0.2) and (QL < 55) and (SBF > 0.06)

        gdc_filter1 = float(info["PureCN.PS"]) < 0.2 or float(info["PureCN.LR"]) > 2 or float(info["PureCN.LR"]) < -2 \
                     or float(info["PureCN.GM0"]) > 0.1 or float(info["PureCN.GM1"]) > 0.1 or float(info["PureCN.GM2"]) > 0.1 \
                     or float(info["PureCN.GM3"]) > 0.1 or float(info["PureCN.GM4"]) > 0.1 or float(info["PureCN.GM5"]) > 0.1 \
                     or float(info["PureCN.GM6"]) > 0.1 or float(info["PureCN.GM7"]) > 0.1

        gdc_filter2 = gdc_filter1 or AF < 0.1 or MQ < 20 or MSI > 5 or SHIFT3 > 10 or NM > 2 or ODDRATIO > 20

        if bcbio_filter1 and bcbio_filter2 and gdc_filter2:
            filter_set.append("gdc_purecn_germline")
    except:
        pass

    if len(filter_set) == 0:
        f2.write("\t".join(val[0:6] + ["PASS"] + val[7:]) + "\n")
    else:
        f2.write("\t".join(val[0:6] + [";".join(filter_set)] + val[7:]) + "\n")

f1.close()
f2.close()
