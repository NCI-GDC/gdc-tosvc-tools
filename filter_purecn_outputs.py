"""
Filter VCF output file generated by PureCN 1.11.7
"""

import sys
import argparse

def get_info(val):
    info, sinfo = {}, {}
    for v in val[0].split(";"):
        tmp1 = v.split("=")
        if len(tmp1) == 2:
            info[tmp1[0]] = tmp1[1]
    tmp2 = val[1].split(":")
    tmp3 = val[2].split(":")
    for i in range(len(tmp2)):
        sinfo[tmp2[i]] = tmp3[i]
    return info, sinfo

parser = argparse.ArgumentParser(description='Modify purecn input files.')
parser.add_argument('-i', '--input_vcf', type=str, required=True, help='purecn input vcf file')
parser.add_argument('-o', '--output_vcf', type=str, required=True, help='filtered output vcf file')
parser.add_argument('-p', '--prob_thres', type=float, default=0.2, required=True, help='variants are filtered if their posterior probability less than thredhold)')
args = vars(parser.parse_args())
input_fn = args['input_vcf']
output_fn = args['output_vcf']
prob_thres = args['prob_thres']

f1 = open(input_fn)
f2 = open(output_fn, "w")
header = []
filter_add = False
for line in f1:
    if line[0] == "#":
        if "FILTER" in line and filter_add == False:
            f2.write("##FILTER=<ID=PASS,Description=\"Pass all GDC filtering\">\n")
            f2.write("##FILTER=<ID=purecn_quality,Description=\"PureCN variant quality filter\">\n")
            f2.write("##FILTER=<ID=gdc_germline,Description=\"PureCN variant calls masked as germline by GDC filtering\">\n")
            filter_add = True
        f2.write(line)
        continue
    val = line.strip().split("\t")
    filter = []
    if val[6] != ".":
        filter = val[6].split(";")
    info, sinfo = get_info(val[7:])
    if "PureCN.PS" not in info:
        f2.write("\t".join(val[0:6] + [";".join(filter + ["purecn_quality"])] + val[7:]) + "\n")
    else:
        if float(info["PureCN.PS"]) < prob_thres:
            f2.write("\t".join(val[0:6] + [";".join(filter + ["gdc_germline"])] + val[7:]) + "\n")
        else:
            f2.write("\t".join(val[0:6] + ["PASS"] + val[7:]) + "\n")
f2.close()
f1.close()
